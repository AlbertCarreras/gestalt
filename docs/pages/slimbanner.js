// @flow strict
import { type Node } from 'react';
import MainSection from '../components/MainSection.js';
import PageHeader from '../components/PageHeader.js';
import Page from '../components/Page.js';
import GeneratedPropTable from '../components/GeneratedPropTable.js';
import docgen, { type DocGen } from '../components/docgen.js';

export default function SlimBannerPage({ generatedDocGen }: {| generatedDocGen: DocGen |}): Node {
  return (
    <Page title={generatedDocGen?.displayName}>
      <PageHeader
        name={generatedDocGen?.displayName}
        description={generatedDocGen?.description}
        defaultCode={`
  <SlimBanner
    message="Your total audience includes all users who have seen or engaged with any of your Pins in the last 30 days."
    iconAccessibilityLabel=""
  />
`}
      />

      <GeneratedPropTable generatedDocGen={generatedDocGen} />

      <MainSection name="Usage guidelines">
        <MainSection.Subsection columns={2}>
          <MainSection.Card
            cardSize="md"
            type="do"
            title="When to use"
            description={`
- When displaying section-level information to the user.
- When providing persistent messaging/guidance for specific elements or areas within a surface or page.
- When providing messaging/guidance on information-dense screens where there is limited space.
        `}
          />
          <MainSection.Card
            cardSize="md"
            type="don't"
            title="When not to use"
            description={`
- When displaying information that pertains to the whole page and is of the highest priority. Use [Callout](/callout) instead.
- When interacting with the SlimBanner is required for the user to proceed with a task or flow. Use [Modal](/modal) instead.
- When describing the function of an interactive element that doesn’t have a text label. Use [Toast](/toast) instead.
- When calling a users attention to a feature for the first time. Use [Popover](/popover) instead.
        `}
          />
        </MainSection.Subsection>
      </MainSection>

      <MainSection name="Best practices">
        <MainSection.Subsection columns={1}>
          <MainSection.Card
            cardSize="lg"
            type="do"
            description="Use for messages generated by the system that stay persistent on a surface"
            defaultCode={`
<SlimBanner
  status="info"
  message="This ad group is part of a campaign that is using campaign budget optimization. Changes to schedule or budget must be made at the campaign level."
  iconAccessibilityLabel="Information banner"
  helperLink={{
      text: 'Learn more',
      accessibilityLabel: 'Learn more about campaign budget optimization',
      href: 'http://www.pinterest.com',
      onClick: () => {},
    }}
/>
`}
          />
          <MainSection.Card
            cardSize="lg"
            type="don't"
            description={`
Use for messages generated in response to user interaction. Use [Toast](/toast) or [Modal](/modal) instead.`}
            defaultCode={`
<SlimBanner
  status="success"
  message="The Pin was added to your"
  iconAccessibilityLabel="Information banner"
  helperLink={{
      text: 'Vision Board',
      accessibilityLabel: 'Vision Board',
      href: 'http://www.pinterest.com',
      onClick: () => {},
    }}
/>
`}
          />
        </MainSection.Subsection>

        <MainSection.Subsection columns={1}>
          <MainSection.Card
            cardSize="lg"
            type="do"
            description="Place SlimBanner near elements of a section that it most relates to"
            defaultCode={`
<Flex direction="column" width="100%" gap={2}>
  <PageHeader title="Ads overview"  />
  <Module id="doExample" title="Campaign optimization & delivery">
    <Flex direction="column" width="100%" gap={8}>
      <TextField
        id="tag-readonly"
        label="Tag ID"
        onChange={() => {}}
        value="Tag 2022"
        readOnly
      />
      <SelectList
        id="seliectList"
        onChange={() => {}}
        options={[
          {label: 'Lead', value: 'lead'},
        ]}
        label='Select conversion event'
        size='lg'
      />
      <Divider />
      <Fieldset legend="Bidding">
        <Flex direction="column" gap={2}>
          <RadioButton
            checked
            id="automatic"
            label="Automatic (recommended)"
            name="Automatic"
            onChange={() => {}}
            value="automatic"
            subtext="Pinterest aims to get the most clicks for your budget"
          />
          <RadioButton
            id="custom"
            label="Custom"
            name="custom"
            onChange={() => {}}
            value="custom"
            subtext="You control how much to bid at auction"

          />
        </Flex>
      </Fieldset>
      <Divider />
      <Checkbox
        id="checkboc"
        label="I'll set the optimization & delivery by ad group instead"
        name="error"
        onChange={() => {}}
      />
      <SlimBanner
        status="info"
        message="For best conversion campaign performance we recommend setting optimization & delivery at the campaign level so all ad groups have the same values, but you can set them individually."
        iconAccessibilityLabel="Information banner"
      />
    </Flex>
  </Module>

</Flex>
        `}
          />
          <MainSection.Card
            cardSize="lg"
            type="don't"
            description={`
Place SlimBanner at the top of a page and use them for highest-priority messaging. Use [Callout](/callout) instead`}
            defaultCode={`
<Flex direction="column" width="100%" gap={2}>
  <PageHeader
    title="Ads overview"
    helperLink={{
      text: "Learn more.",
      accessibilityLabel: "Learn more Pinterest.com",
      href: "http://www.pinterest.com",
      onClick: () => {} }}
    items={[
      <Datapoint
        size="md"
        title="Impressions"
        value="$1.25M"
        trend={{ value: 30, accessibilityLabel: 'Trending up' }}
      />,
      <Datapoint
        size="md"
        title="Engagement"
        value="10%"
        trend={{ value: 5, accessibilityLabel: 'Trending up' }}
      />
    ]}
    primaryAction={{
      component: <Button color="red" size="lg" text="Create ad" />,
      dropdownItems: [
        <Dropdown.Item option={{ value: 'Create ad', label: 'Create ad' }} onSelect={() => {}} />,
      ],
    }}
    dropdownAccessibilityLabel="More options"
  />
  <SlimBanner
  status="error"
  message="There is an issue with your billing account so all ads currently paused."
  iconAccessibilityLabel="Error banner"
  />
</Flex>
        `}
          />
        </MainSection.Subsection>
        <MainSection.Subsection columns={1}>
          <MainSection.Card
            cardSize="lg"
            type="do"
            description={`Use "light" SlimBanners for dense interfaces where space is an issue.`}
            defaultCode={`
<Flex direction="column" width="100%" gap={2}>
  <PageHeader title="Campaign details" />
  <Box paddingX={8}>
    <Flex width="100%" direction="column" gap={4}>
      <Heading size="400">Campaign name</Heading>
      <Text>Give your campaign a name. Only you will see what you've named your campaign.</Text>
      <Heading size="400">Campaign spend limits</Heading>
      <Text>For video views and web sessions objectives only, campaign spend limits help you control the amount your campaign spends.</Text>
      <SlimBanner
        status="warning"
        type="light"
        message="Spend limits may change your overall billing details."
        iconAccessibilityLabel="Warning banner"
      />
      <Heading size="400">Campaign status</Heading>
      <Text>Set your campaign status to active to begin serving ads as soon as you launch or set your campaign status to paused and activate it later.</Text>
    </Flex>
  </Box>
</Flex>
        `}
          />
          <MainSection.Card
            cardSize="lg"
            type="don't"
            description={`
Use a regular SlimBanner with a background for dense interfaces where space is an issue.`}
            defaultCode={`
<Flex direction="column" width="100%" gap={2}>
  <PageHeader title="Campaign details" />
  <Box paddingX={8}>
    <Flex width="100%" direction="column" gap={4}>
      <Heading size="400">Campaign name</Heading>
      <Text>Give your campaign a name. Only you will see what you've named your campaign.</Text>
      <Heading size="400">Campaign spend limits</Heading>
      <Text>For video views and web sessions objectives only, campaign spend limits help you control the amount your campaign spends.</Text>
      <SlimBanner
        status="warning"
        message="Spend limits may change your overall billing details."
        iconAccessibilityLabel="Warning banner"
      />
      <Heading size="400">Campaign status</Heading>
      <Text>Set your campaign status to active to begin serving ads as soon as you launch or set your campaign status to paused and activate it later.</Text>
    </Flex>
  </Box>
</Flex>
        `}
          />
        </MainSection.Subsection>
        <MainSection.Subsection columns={1}>
          <MainSection.Card cardSize="lg" type="do" description="TBD." defaultCode="" />
          <MainSection.Card
            cardSize="lg"
            type="don't"
            description={`
Stack multiple SlimBanners or combine them with other components like [Callouts](/callout) or [Upsells](/upsell).`}
            defaultCode=""
          />
        </MainSection.Subsection>
      </MainSection>

      <MainSection
        name="Accessibility"
        description={`\`Accessibility\` guidelines go here. Can also include SubSections and Cards for detailed examples (see Box). Using backticks instead of quotes allows you to use [Markdown](https://www.markdownguide.org/)`}
      />
      <MainSection
        name="Localization"
        description={`\`Localization\` guidelines go here. Can be examples in another language or truncation examples. Using backticks instead of quotes allows you to use [Markdown](https://www.markdownguide.org/)`}
      />
      <MainSection name="Variants">
        <MainSection.Subsection
          description={`Description of this \`variant\`. Using backticks instead of quotes allows you to use [Markdown](https://www.markdownguide.org/)`}
          title="Variant name (sentence case)"
        >
          <MainSection.Card
            cardSize="md"
            title="Example title (optional)"
            defaultCode={`
<SlimBanner message="Your total audience includes all users who have seen or engaged with any of your Pins in the last 30 days." iconAccessibilityLabel=""/>
`}
          />
        </MainSection.Subsection>
        <MainSection.Subsection
          description={`Description of this \`variant\`. Using backticks instead of quotes allows you to use [Markdown](https://www.markdownguide.org/)`}
          title="Variant name (sentence case)"
        >
          <MainSection.Card
            cardSize="md"
            title="Example title (optional)"
            defaultCode={`
<SlimBanner message="Your total audience includes all users who have seen or engaged with any of your Pins in the last 30 days." iconAccessibilityLabel=""/>
`}
          />
        </MainSection.Subsection>
      </MainSection>
      <MainSection name="Writing">
        <MainSection.Subsection columns={2}>
          <MainSection.Card
            cardSize="md"
            type="do"
            description={`
- Use succinct and scannable language that clearly conveys information to the user without being overly clever or technical
- Consider internationalization and how other languages may be constrained
`}
          />
          <MainSection.Card
            cardSize="md"
            type="don't"
            description={`
- Write messages that are wordy and take up a lot of space
- Use exclamation points for warning and error status if the tone isn’t celebratory, for example: “Update your account!”
`}
            defaultCode={`
<SlimBanner message="Your total audience includes all users who have seen or engaged with any of your Pins in the last 30 days." iconAccessibilityLabel=""/>
`}
          />
        </MainSection.Subsection>
      </MainSection>
      <MainSection name="Related">
        <MainSection.Subsection
          description={`
**[Upsell](/Upsell)**
An Upsell is used to market new features or to encourage a user to try recommendations.

**[Callout](/Callout)**
Callouts are used at the top-most level of a page to communicate highest-priority information that applies to the entire page or surface. Callouts can be dismissed and are also actionable.

**[Toast](/Toast)**
Toast provides feedback shortly after a user interaction, like a confirmation that appears when a Pin has been saved. Unlike Upsells and Banner Alerts, toasts overlay Page content. They also automatically disappear after a certain amount of time without being dismissed by the user.

**[Tooltip](/Tooltip)**
Tooltip provides helpful information regarding an interactive UI element, typically an Iconbutton. It is displayed on hover of a UI element, and disappears on mouse out.
    `}
        />
      </MainSection>
    </Page>
  );
}

export async function getStaticProps(): Promise<{| props: {| generatedDocGen: DocGen |} |}> {
  return {
    props: { generatedDocGen: await docgen({ componentName: 'SlimBanner' }) },
  };
}
