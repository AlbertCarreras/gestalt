// @flow strict
const StyleDictionary = require('style-dictionary');

// FORMATTING HELPERS

// $FlowFixMe[missing-local-annot]
function formatFlowTypes(dictionaryTokens) {
  return `// @flow strict\n/* File is autogenerated */\n\ndeclare module.exports: {|\n${dictionaryTokens
    .map((token) => `  +"${token.name}": ${JSON.stringify(token.value)}`)
    .join(',\n')}\n|}`;
}

// REGISTER FILE HEADERS

const { fileHeader } = StyleDictionary.formatHelpers;

StyleDictionary.registerFileHeader({
  name: 'fileHeader',
  // defaultMessage contains the 2 lines that appear in the default file header
  fileHeader: (defaultMessage) => ['File is autogenerated', ...defaultMessage],
});

StyleDictionary.registerFileHeader({
  name: 'flowFileHeader',
  // defaultMessage contains the 2 lines that appear in the default file header
  fileHeader: (defaultMessage) => ['@flow strict \n// File is autogenerated', ...defaultMessage],
});

StyleDictionary.registerFileHeader({
  name: 'androidFileHeader',
  fileHeader: (defaultMessage) => ['File is autogenerated', ...defaultMessage],
});

// REGISTER FORMATS

const regex = /(\{|\})/gi;
const regex1A = /(\{(?!\w)|\}(?!\w))/gi;

StyleDictionary.registerFormat({
  name: 'commonJS/flow',
  formatter: ({ dictionary, file }) => {
    const tokenArray = dictionary.allTokens.map((token) =>
      JSON.stringify({
        name: token.path.join('-'),
        value: token.value,
        // For lightened values with appended 1A, let's keep {value}1A if not remove the parenthesis
        originalValue: token.original.value.endsWith('}1A')
          ? token.original.value?.replace(regex1A, '')
          : token.original.value.replace(regex, ''),
        comment: token.comment,
        category: token.attributes.category,
      }),
    );
    return `${fileHeader({ file, commentStyle: 'short' })} module.exports = [${tokenArray}]`;
  },
});

StyleDictionary.registerFormat({
  name: 'darkTheme-commonJS/flow',
  formatter: ({ dictionary, file }) => {
    const tokenArray = dictionary.allTokens.map((token) =>
      JSON.stringify({
        name: token.path.join('-'),
        value: token.value,
        originalValue: token.original.value.endsWith('}1A')
          ? token.original.value?.replace(regex1A, '')
          : token.original.value.replace(regex, ''), // eslint-disable-next-line no-underscore-dangle
        _darkModeSupport: !token._darkMode,
        comment: token.comment,
        category: token.attributes.category,
      }),
    );
    return `${fileHeader({ file, commentStyle: 'short' })} module.exports = [${tokenArray}]`;
  },
});

StyleDictionary.registerFormat({
  name: 'javascript/es6/flow',
  // https://amzn.github.io/style-dictionary/#/formats?id=javascriptes6
  formatter: ({ dictionary }) =>
    `// @flow strict\n\n${StyleDictionary.format['javascript/es6']({
      dictionary,
    })}`,
});

StyleDictionary.registerFormat({
  name: 'json/flat/flow',
  formatter: ({ dictionary }) => formatFlowTypes(dictionary.allTokens),
});

StyleDictionary.registerFormat({
  name: `constantLibrary-javascript/es6/flow`,
  formatter({ dictionary }) {
    const tokenDataString = dictionary.allTokens
      .map((token) => {
        let value = JSON.stringify(token.value);
        if (dictionary.usesReference(token.original.value)) {
          const refs = dictionary.getReferences(token.original.value);
          refs.forEach((ref) => {
            value = value.replace(ref.value, ref.name);
          });
        }

        const formattedTokenName = token.path.join('_').toUpperCase().replace('-', '_');

        return `export const TOKEN_${formattedTokenName} = 'var(--${token.path.join('-')})';`;
      })
      .join(`\n`);

    return `// @flow strict\n\n/* File is autogenerated */\n\n${tokenDataString}`;
  },
});

StyleDictionary.registerFormat({
  name: `constantLibrary-commonJS/flow`,
  formatter({ dictionary, file }) {
    const tokens = dictionary.allTokens
      .map((token) => {
        let value = JSON.stringify(token.value);
        if (dictionary.usesReference(token.original.value)) {
          const refs = dictionary.getReferences(token.original.value);
          refs.forEach((ref) => {
            value = value.replace(ref.value, ref.name);
          });
        }
        return `  TOKEN_${token.path
          .join('_')
          .toUpperCase()
          .replace('-', '_')}: 'var(--${token.path.join('-')})',`;
      })
      .join(`\n`)
      .slice(0, -1);

    const fileHeaderString = fileHeader({
      file,
      commentStyle: 'short',
    });

    return `${fileHeaderString}module.exports = Object.freeze({\n${tokens}\n})`;
  },
});

// REGISTER FILTERS

// Filters only tokens with dark theme values
StyleDictionary.registerFilter({
  name: 'darkThemeFilter',
  matcher(token) {
    return token.attributes.category === 'color' || token.attributes.category === 'elevation';
  },
});

// Filters only tokens with data-visualization
StyleDictionary.registerFilter({
  name: 'dataVisualizationFilter',
  matcher(token) {
    return token.attributes.category === 'color' && token.attributes.type === 'data-visualization';
  },
});

// REGISTER TRANSFORMS

StyleDictionary.registerTransform({
  name: 'size/pxToDpOrSp',
  type: 'value',
  matcher(prop) {
    return prop.value.match(/^-?[\d.]+px$/);
  },
  transformer(prop) {
    return prop.name.includes('font')
      ? prop.value.replace(/px$/, 'sp')
      : prop.value.replace(/px$/, 'dp');
  },
});

// REGISTER TRANSFORM GROUPS

StyleDictionary.registerTransformGroup({
  name: 'androidTransformGroup',
  transforms: ['attribute/cti', 'name/cti/snake', 'color/hex8android', 'size/pxToDpOrSp'],
});

// BUILD CONFIGURATION

// $FlowFixMe[missing-local-annot]
function getWebConfig({ mode }) {
  return {
    'source': [
      `tokens/color/mainTheme/base.json`,
      `tokens/color/mainTheme/data-visualization/base${
        mode === 'dark' ? '-darkTheme' : '-lightTheme'
      }.json`,
      `tokens/color/mainTheme/data-visualization/alias${
        mode === 'dark' ? '-darkTheme' : '-lightTheme'
      }.json`,
      `tokens/color/mainTheme/alias${mode === 'dark' ? '-darkTheme' : '-lightTheme'}.json`,
      `tokens/color/mainTheme/component${mode === 'dark' ? '-darkTheme' : '-lightTheme'}.json`,
      `tokens/elevation/mainTheme/base${mode === 'dark' ? '-darkTheme' : '-lightTheme'}.json`,
      `tokens/elevation/mainTheme/component${mode === 'dark' ? '-darkTheme' : '-lightTheme'}.json`,
      'tokens/font/*.json',
      'tokens/opacity/*.json',
      'tokens/rounding/*.json',
      'tokens/space/*.json',
    ],
    'platforms': {
      'css': {
        'transformGroup': 'css',
        '_transformGroup_comment':
          'https://amzn.github.io/style-dictionary/#/transform_groups?id=css',
        'buildPath': 'dist/css/',
        'files':
          mode !== 'dark'
            ? [
                {
                  'destination': 'variables.css',
                  'format': 'css/variables',
                  '_format_comment':
                    'https://amzn.github.io/style-dictionary/#/formats?id=cssvariables',
                  'options': {
                    'fileHeader': 'fileHeader',
                    '_fileHeader_comment': 'Custom.',
                    'showFileHeader': true,
                    'outputReferences': true,
                  },
                },
              ]
            : [
                {
                  'destination': 'variables-dark.css',
                  'format': 'css/variables',
                  '_format_comment': 'Custom.',
                  'filter': 'darkThemeFilter',
                  '_filter_comment': 'Custom.',
                  'options': {
                    'fileHeader': 'fileHeader',
                    '_fileHeader_comment': 'Custom.',
                    'showFileHeader': true,
                    'outputReferences': true,
                  },
                },
              ],
      },
      'json': {
        'transformGroup': 'css',
        '_transformGroup_comment':
          'https://amzn.github.io/style-dictionary/#/transform_groups?id=css',
        'buildPath': 'dist/json/',
        'files':
          mode !== 'dark'
            ? [
                {
                  'destination': 'variables.json',
                  'format': 'json/flat',
                  '_format_comment':
                    'https://amzn.github.io/style-dictionary/#/formats?id=jsonflat',
                },
                {
                  'destination': 'variables-light.json',
                  'format': 'json/flat',
                  '_format_comment':
                    'https://amzn.github.io/style-dictionary/#/formats?id=jsonflat',
                  'filter': 'darkThemeFilter',
                  '_filter_comment': 'Custom.',
                },
              ]
            : [
                {
                  'destination': 'variables-dark.json',
                  'format': 'json/flat',
                  '_format_comment': 'Custom.',
                  'filter': 'darkThemeFilter',
                  '_filter_comment': 'Custom.',
                },
              ],
      },
      'jsonflow': {
        'transformGroup': 'css',
        '_transformGroup_comment':
          'https://amzn.github.io/style-dictionary/#/transform_groups?id=css',
        'buildPath': 'dist/json/',
        'files':
          mode !== 'dark'
            ? [
                {
                  'destination': 'variables.json.flow',
                  'format': 'json/flat/flow',
                  '_format_comment': 'Custom.',
                },
                {
                  'destination': 'variables-light.json.flow',
                  'format': 'json/flat/flow',
                  '_format_comment': 'Custom.',
                  'filter': 'darkThemeFilter',
                  '_filter_comment': 'Custom.',
                },
              ]
            : [
                {
                  'destination': 'variables-dark.json.flow',
                  'format': 'json/flat/flow',
                  '_format_comment': 'Custom.',
                  'filter': 'darkThemeFilter',
                  '_filter_comment': 'Custom.',
                },
              ],
      },
      'js': {
        'transformGroup': 'js',
        '_transformGroup_comment':
          'https://amzn.github.io/style-dictionary/#/transform_groups?id=js',
        'buildPath': 'dist/js/',
        'options': {
          'showFileHeader': true,
          'fileHeader': 'flowFileHeader',
          '_fileHeader_comment': 'Custom.',
        },
        'files':
          mode !== 'dark'
            ? [
                {
                  'destination': 'constants.es.js',
                  'format': 'constantLibrary-javascript/es6/flow',
                  '_format_comment': 'Custom.',
                },
                {
                  'destination': 'constants.js',
                  'format': 'constantLibrary-commonJS/flow',
                  '_format_comment': 'Custom. See packages/gestalt-design-tokens/build.js',
                },
                {
                  'destination': 'tokens.js',
                  'format': 'commonJS/flow',
                  '_format_comment': 'Custom.',
                },
                {
                  'destination': 'tokens_individual.js',
                  'format': 'javascript/es6/flow',
                  '_format_comment': 'Custom.',
                },
                {
                  'destination': 'data-viz-tokens.js',
                  'format': 'commonJS/flow',
                  '_format_comment': 'Custom.',
                  'filter': 'dataVisualizationFilter',
                  '_filter_comment': 'Custom.',
                },
                {
                  'destination': 'data-viz-tokens_individual.js',
                  'format': 'javascript/es6/flow',
                  '_format_comment': 'Custom.',
                  'filter': 'dataVisualizationFilter',
                  '_filter_comment': 'Custom.',
                },
              ]
            : [
                {
                  'destination': 'tokens_dark.js',
                  'format': 'darkTheme-commonJS/flow',
                  '_format_comment': 'Custom.',
                },
                {
                  'destination': 'tokens_individual_dark.js',
                  'format': 'javascript/es6/flow',
                  '_format_comment': 'Custom.',
                },
                {
                  'destination': 'data-viz-tokens_dark.js',
                  'format': 'darkTheme-commonJS/flow',
                  '_format_comment': 'Custom.',
                  'filter': 'dataVisualizationFilter',
                  '_filter_comment': 'Custom.',
                },
                {
                  'destination': 'data-viz-tokens_individual_dark.js',
                  'format': 'javascript/es6/flow',
                  '_format_comment': 'Custom.',
                  'filter': 'dataVisualizationFilter',
                  '_filter_comment': 'Custom.',
                },
              ],
      },
    },
  };
}

// $FlowFixMe[missing-local-annot]
function getAndroidConfiguration({ mode }) {
  return {
    'source': [
      `tokens/color/mainTheme/base.json`,
      `tokens/color/mainTheme/data-visualization/base${
        mode === 'dark' ? '-darkTheme' : '-lightTheme'
      }.json`,
      `tokens/color/mainTheme/data-visualization/alias${
        mode === 'dark' ? '-darkTheme' : '-lightTheme'
      }.json`,
      `tokens/color/mainTheme/alias${mode === 'dark' ? '-darkTheme' : '-lightTheme'}.json`,
      `tokens/elevation/mainTheme/base${mode === 'dark' ? '-darkTheme' : '-lightTheme'}.json`,
      'tokens/font/base.json',
      'tokens/opacity/base.json',
      'tokens/rounding/base.json',
      'tokens/space/base.json',
    ],
    'platforms': {
      'android': {
        'transformGroup': 'androidTransformGroup',
        '_format_comment': 'Custom.',
        'buildPath': 'dist/android/',
        'options': {
          'showFileHeader': true,
          'fileHeader': 'androidFileHeader',
          '_fileHeader_comment': 'Custom.',
        },
        'files':
          mode !== 'dark'
            ? [
                {
                  'destination': 'colors.xml',
                  'format': 'android/resources',
                  '_format_comment':
                    'https://amzn.github.io/style-dictionary/#/formats?id=androidcolors',
                  'resourceType': 'color',
                  'filter': {
                    'attributes': {
                      'category': 'color',
                    },
                  },
                  'options': {
                    'outputReferences': true,
                  },
                },
                {
                  'destination': 'font-size.xml',
                  'format': 'android/resources',
                  '_format_comment':
                    'https://amzn.github.io/style-dictionary/#/formats?id=androidresources',
                  'resourceType': 'dimen',
                  'filter': {
                    'attributes': {
                      'category': 'font',
                      'type': 'size',
                    },
                  },
                  'options': {
                    'outputReferences': true,
                  },
                },
                {
                  'destination': 'opacity.xml',
                  'format': 'android/resources',
                  'resourceType': 'dimen',
                  'filter': {
                    'attributes': {
                      'category': 'opacity',
                    },
                  },
                  'options': {
                    'outputReferences': true,
                  },
                },
                {
                  'destination': 'rounding.xml',
                  'format': 'android/resources',
                  'resourceType': 'dimen',
                  'filter': {
                    'attributes': {
                      'category': 'rounding',
                    },
                  },
                  'options': {
                    'outputReferences': true,
                  },
                },
                {
                  'destination': 'space.xml',
                  'format': 'android/resources',
                  'resourceType': 'dimen',
                  'filter': {
                    'attributes': {
                      'category': 'space',
                    },
                  },
                  'options': {
                    'outputReferences': true,
                  },
                },
              ]
            : [
                {
                  'destination': 'colors-dark.xml',
                  'format': 'android/resources',
                  '_filter_comment': 'Custom.',
                  'resourceType': 'color',
                  'filter': {
                    'attributes': {
                      'category': 'color',
                    },
                  },
                  'options': {
                    'outputReferences': true,
                  },
                },
              ],
      },
    },
  };
}

// $FlowFixMe[missing-local-annot]
function getIOSConfiguration({ mode }) {
  return {
    'source': [
      `tokens/color/mainTheme/base.json`,
      `tokens/color/mainTheme/data-visualization/base${
        mode === 'dark' ? '-darkTheme' : '-lightTheme'
      }.json`,
      `tokens/color/mainTheme/data-visualization/alias${
        mode === 'dark' ? '-darkTheme' : '-lightTheme'
      }.json`,
      `tokens/color/mainTheme/alias${mode === 'dark' ? '-darkTheme' : '-lightTheme'}.json`,
      `tokens/elevation/mainTheme/base${mode === 'dark' ? '-darkTheme' : '-lightTheme'}.json`,
      'tokens/font/base.json',
      'tokens/opacity/base.json',
      'tokens/rounding/base.json',
      'tokens/space/base.json',
    ],
    'platforms': {
      'ios': {
        'transformGroup': 'ios',
        '_transformGroup_comment':
          'https://amzn.github.io/style-dictionary/#/transform_groups?id=ios',
        'buildPath': 'dist/ios/',
        'files':
          mode !== 'dark'
            ? [
                {
                  'destination': 'GestaltDesignTokensColor.h',
                  'format': 'ios/colors.h',
                  '_format_comment':
                    'https://amzn.github.io/style-dictionary/#/formats?id=ioscolorsh',
                  'className': 'GestaltDesignTokensColor',
                  'type': 'GestaltDesignTokensColorName',
                  'filter': {
                    'attributes': {
                      'category': 'color',
                    },
                  },
                  'options': {
                    'fileHeader': 'fileHeader',
                    '_fileHeader_comment': 'Custom. See packages/gestalt-design-tokens/build.js',
                    'showFileHeader': true,
                  },
                },
                {
                  'destination': 'GestaltDesignTokensColor.m',
                  'format': 'ios/colors.m',
                  '_format_comment':
                    'https://amzn.github.io/style-dictionary/#/formats?id=ioscolorsm',
                  'className': 'GestaltDesignTokensColor',
                  'type': 'GestaltDesignTokensColorName',
                  'filter': {
                    'attributes': {
                      'category': 'color',
                    },
                  },
                  'options': {
                    'fileHeader': 'fileHeader',
                    '_fileHeader_comment': 'Custom. See packages/gestalt-design-tokens/build.js',
                    'showFileHeader': true,
                  },
                },
              ]
            : [
                {
                  'destination': 'GestaltDesignTokensColorDarkTheme.h',
                  'format': 'ios/colors.h',
                  '_format_comment':
                    'https://amzn.github.io/style-dictionary/#/formats?id=ioscolorsh',
                  'className': 'GestaltDesignTokensColor',
                  'type': 'GestaltDesignTokensColorName',
                  'filter': {
                    'attributes': {
                      'category': 'color',
                    },
                  },
                  'options': {
                    'fileHeader': 'fileHeader',
                    '_fileHeader_comment': 'Custom. See packages/gestalt-design-tokens/build.js',
                    'showFileHeader': true,
                  },
                },
                {
                  'destination': 'GestaltDesignTokensColorDarkTheme.m',
                  'format': 'ios/colors.m',
                  '_format_comment':
                    'https://amzn.github.io/style-dictionary/#/formats?id=ioscolorsm',
                  'className': 'GestaltDesignTokensColor',
                  'type': 'GestaltDesignTokensColorName',
                  'filter': {
                    'attributes': {
                      'category': 'color',
                    },
                  },
                  'options': {
                    'fileHeader': 'fileHeader',
                    '_fileHeader_comment': 'Custom. See packages/gestalt-design-tokens/build.js',
                    'showFileHeader': true,
                  },
                },
              ],
      },
      'ios-swift': {
        'transformGroup': 'ios-swift',
        '_transformGroup_comment':
          'https://amzn.github.io/style-dictionary/#/transform_groups?id=ios-swift',
        'buildPath': 'dist/ios-swift/',
        'files':
          mode !== 'dark'
            ? [
                {
                  'destination': 'GestaltDesignTokens.swift',
                  'format': 'ios-swift/class.swift',
                  '_format_comment':
                    'https://amzn.github.io/style-dictionary/#/formats?id=ios-swiftclassswift',
                  'className': 'GestaltDesignTokens',
                  'options': {
                    'fileHeader': 'fileHeader',
                    '_fileHeader_comment': 'Custom. See packages/gestalt-design-tokens/build.js',
                    'showFileHeader': true,
                  },
                },
              ]
            : [
                {
                  'destination': 'GestaltDesignTokensDarkTheme.swift',
                  'format': 'ios-swift/class.swift',
                  '_format_comment':
                    'https://amzn.github.io/style-dictionary/#/formats?id=ios-swiftclassswift',
                  'className': 'GestaltDesignTokens',
                  'options': {
                    'fileHeader': 'fileHeader',
                    '_fileHeader_comment': 'Custom. See packages/gestalt-design-tokens/build.js',
                    'showFileHeader': true,
                  },
                },
              ],
      },
      'ios-swift-separate-enums': {
        'transformGroup': 'ios-swift-separate',
        '_transformGroup_comment':
          'https://amzn.github.io/style-dictionary/#/transform_groups?id=ios-swift-separate',
        'buildPath': 'dist/ios-swift/',
        'files':
          mode !== 'dark'
            ? [
                {
                  'destination': 'GestaltDesignTokensColor.swift',
                  'format': 'ios-swift/enum.swift',
                  '_format_comment':
                    'https://amzn.github.io/style-dictionary/#/formats?id=ios-swiftenumswift',
                  'className': 'GestaltDesignTokensColor',
                  'filter': {
                    'attributes': {
                      'category': 'color',
                    },
                  },
                  'options': {
                    'fileHeader': 'fileHeader',
                    '_fileHeader_comment': 'Custom. See packages/gestalt-design-tokens/build.js',
                    'showFileHeader': true,
                  },
                },
              ]
            : [
                {
                  'destination': 'GestaltDesignTokensColorDarkTheme.swift',
                  'format': 'ios-swift/enum.swift',
                  '_format_comment':
                    'https://amzn.github.io/style-dictionary/#/formats?id=ios-swiftenumswift',
                  'className': 'GestaltDesignTokensColor',
                  'filter': {
                    'attributes': {
                      'category': 'color',
                    },
                  },
                  'options': {
                    'fileHeader': 'fileHeader',
                    '_fileHeader_comment': 'Custom. See packages/gestalt-design-tokens/build.js',
                    'showFileHeader': true,
                  },
                },
              ],
      },
    },
  };
}
// BUILD EXECUTION

const platformFileMap = {
  web: ['css', 'json', 'jsonflow', 'js'],
  android: ['android'],
  ios: ['ios', 'ios-swift', 'ios-swift-separate-enums'],
};

['light', 'dark'].forEach((mode) => {
  // Android platform
  const StyleDictionaryAndroid = StyleDictionary.extend(getAndroidConfiguration({ mode }));
  platformFileMap.android.forEach((platform) => StyleDictionaryAndroid.buildPlatform(platform));

  // iOS platform
  const StyleDictionaryIOS = StyleDictionary.extend(getIOSConfiguration({ mode }));
  platformFileMap.ios.forEach((platform) => StyleDictionaryIOS.buildPlatform(platform));

  // web platform
  const StyleDictionaryWeb = StyleDictionary.extend(getWebConfig({ mode }));
  platformFileMap.web.forEach((platform) => StyleDictionaryWeb.buildPlatform(platform));
});
